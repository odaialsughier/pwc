<?php
/**
 * Created by PhpStorm.
 * User: anasjamil
 * Date: 4/10/18
 * Time: 16:39 PM
 *
 * @var $owner \api\versions\v1\controllers\AltibbiController
 */
namespace common\behaviors;

use api\versions\v1\controllers\AltibbiController;
use Yii;
use yii\base\Behavior;
use yii\web\Application;

class ValidateRequestBehavior extends Behavior
{
    public $payloadFieldName = 'payload'; // Default
    public $rules = array();

    public function init()
    {
	    parent::init(); // TODO: Change the autogenerated stub
    }

    public function events()
    {
        return [
            Application::EVENT_BEFORE_ACTION => 'validateParams',
        ];
    }

    public function validateParams($event)
    {
        $request_log = [];
        $request_log['server_info'] = $_SERVER;
        $payloadFieldName =  $this -> payloadFieldName;
        $headers = array();
        $headersIterator  = Yii::$app ->request -> getHeaders()->getIterator()->  getArrayCopy();
        foreach ($headersIterator as $key => $value){
            $headers[$key] = $value[0];
        }
        $request_log['headers'] = $headers;
        $body_data = [];
        if (Yii::$app->request->isGet || Yii::$app->request->isHead) { // need to merge head request with get
            $body_data = Yii::$app->request->get();
            $request_log['get_data'] = $body_data;
        } elseif (Yii::$app->request->isPost) {
            $raw_body = Yii::$app->request->getRawBody();
            $request_data = json_decode($raw_body);
            if (empty($request_data)) {
                $request_data = Yii::$app->request->getBodyParams();
            }
            $body_data = (array) $request_data;
            $request_log['post_data'] = $body_data;
        } elseif(Yii::$app->request->isDelete){
            $raw_body = Yii::$app->request->getRawBody();
            $request_data = json_decode($raw_body);
            $body_data = (array) $request_data;
            $request_log['delete_data'] = $body_data;            
        }


        $requestParams = array_merge($this->owner->requestParams,$body_data, $headers);
        $this->owner->requestParams = $request_log['full_details'] = $requestParams;

        //Yii::info($request_log,'api-requests');

        if(array_key_exists($event -> action -> id , $this -> rules)){
            $actionRules = $this -> rules [$event -> action -> id] ;

            foreach ($actionRules as $validator => $attributes){
                if(method_exists($this, $validator)){
                    //print_r($this -> owner -> requestParams);exit;
                    call_user_func(array($this, $validator),$this -> owner -> requestParams , $attributes);
                }else{
                    throw new \yii\web\HttpException(500, "The '{$validator}' validator could not be found in {$this::className()}");
                }
            }
        }
    }



    public function required($requestParams,$attributes){
        $requestParams = array_keys($requestParams);
        $attributes = array_unique($attributes);
        $missedParams = array_diff($attributes, $requestParams);
        if($missedParams){
            $error_message = "These params are required " . implode(" , ",$missedParams);
            throw new \yii\web\BadRequestHttpException($error_message, 400);
        }

    }
    public function in($requestParams,$attributes){
        foreach ($attributes as $param => $values){
            if(!in_array($requestParams[$param],$values) ){
                $error_message = "'$param' parameter value should be (" . implode(" OR ",$values) . ") only";
                throw new \yii\web\BadRequestHttpException($error_message, 400);
            }
        }
    }

}
